@{
    Layout = null;
}

@model CQRS.Service.QueryResults.ProcessByIdQueryResult

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/dashboard.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/flowchart.css" rel="stylesheet" type="text/css" />
    <title></title>
</head>
<body>

    <div ng-app="app"
         ng-controller="AppCtrl"
         mouse-capture
         ng-keydown="keyDown($event)"
         ng-keyup="keyUp($event)"
         ng-mouseup="mouseUp($event)">

        <nav class="navbar navbar-inverse navbar-fixed-top">
            <div class="container-fluid">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="#">Flowchart Demo</a>
                </div>
                <div id="navbar" class="navbar-collapse collapse">
                    <ul class="nav navbar-nav navbar-right">
                        <li><a href="#">Link 1</a></li>
                        <li><a href="#">Link 2</a></li>
                        <li><a href="#">Link 3</a></li>
                    </ul>
                </div>
            </div>
        </nav>

        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-3 col-md-2 sidebar">

                    <h3>States...</h3>
                    <ul class="nav nav-sidebar">
                        @*<li><a href="#" ng-click="addNewNode()">Add a new state</a></li>*@
                        <li><a href="#" ng-click="stateAdd()">Add a new state</a></li>
                        <li ng-show="oneNodeSelected()"><a href="#" ng-click="stateUpdate()">Edit state</a></li>
                        <li ng-show="oneNodeSelected()"><a href="#" ng-click="deleteSelected()">Delete state</a></li>
                    </ul>

                    @*only displayed when exactly two states are selected*@
                    <div ng-show="twoNodesSelected()">
                        <h3>Transitions...</h3>
                        <ul class="nav nav-sidebar">
                            <li><a href="#">Add transition...</a></li>
                        </ul>
                    </div>

                    @*only displayed when exactly one transition is selected*@
                    <div ng-show="oneConnectionSelected()">
                        <h3>Actions...</h3>
                        <ul class="nav nav-sidebar">
                            <li ng-repeat="a in selectedTransition.Transition.Actions"><a href="#">{{ a.Name }}</a></li>
                            <li><a href="#">Add action...</a></li>
                        </ul>
                    </div>

                </div>
                <div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main" style="height: 1000px;">
                    <flow-chart style="width: 100%; height: 100%;" chart="chartViewModel" on-node-drag-end="onNodeDragEndEvent(evt, node)"></flow-chart>
                    <textarea style="width: 100%; height: 100%;" chart-json-edit="" view-model="chartViewModel" class="ng-isolate-scope"></textarea>
                </div>
            </div>
        </div>

        <script type="text/ng-template" id="stateModal.html">
            <div class="modal-header">
                <h3 class="modal-title" ng-show="selectedState.StateId <= 0">Add State</h3>
                <h3 class="modal-title" ng-show="selectedState.StateId > 0">Update State</h3>
            </div>
            <div class="modal-body">
                <form role="form">
                    <div class="form-group">
                        <label for="Name">State Name:</label>
                        <input type="text" class="form-control" id="Name" ng-model="selectedState.Name">
                    </div>
                    <div class="form-group">
                        <label for="Description">Description:</label>
                        <input type="text" class="form-control" id="Description" ng-model="selectedState.Description">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" type="button" ng-click="ok()">OK</button>
                <button class="btn btn-warning" type="button" ng-click="cancel()">Cancel</button>
            </div>
        </script>

    </div>


    @*<button ng-click="addNewNode()"
                title="Add a new node to the chart">
            Add Node
        </button>
        <button ng-click="addNewInputConnector()"
                ng-disabled="chartViewModel.getSelectedNodes().length == 0"
                title="Add a new input connector to the selected node">
            Add Input Connector
        </button>
        <button ng-click="addNewOutputConnector()"
                ng-disabled="chartViewModel.getSelectedNodes().length == 0"
                title="Add a new output connector to the selected node">
            Add Output Connector
        </button>
        <button ng-click="deleteSelected()"
                ng-disabled="chartViewModel.getSelectedNodes().length == 0 && chartViewModel.getSelectedConnections().length == 0"
                title="Delete selected nodes and connections">
            Delete Selected
        </button>*@


    @Html.ActionLink(" ", "JsonFlowchart", "Process", null, new { id = "process_jsonflowchart", @class = "hide" })
    @Html.ActionLink(" ", "JsonByCurrentAndNextState", "Transition", null, new { id = "transition_jsonbycurrentandnextstate", @class = "hide" })
    @Html.ActionLink(" ", "JsonSave", "State", null, new { id = "state_jsonsave", @class = "hide" })
    @Html.ActionLink(" ", "JsonSaveCoordinates", "State", null, new { id = "state_jsonsavecoordinates", @class = "hide" })

    <script src="~/Scripts/jquery-1.11.3.min.js"></script>
    <script src="~/Scripts/angular.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>

    @* angular bootstrap *@
    <script src="~/Scripts/angular-ui/ui-bootstrap-tpls.min.js" type="text/javascript"></script>

    @* flowchart-specific resources *@
    <script src="~/Scripts/flowchart/svg_class.js" type="text/javascript"></script>
    <script src="~/Scripts/flowchart/mouse_capture_service.js" type="text/javascript"></script>
    <script src="~/Scripts/flowchart/dragging_service.js" type="text/javascript"></script>
    <script src="~/Scripts/flowchart/flowchart_viewmodel.js" type="text/javascript"></script>
    <script src="~/Scripts/flowchart/flowchart_directive.js" type="text/javascript"></script>

    <script>
        //
        // Define the 'app' module.
        //
        angular.module('app', ['flowChart', 'ui.bootstrap']);

        angular.module('app').controller('AppCtrl', ['$scope', '$uibModal', 'svcApp', function AppCtrl($scope, $uibModal, svcApp) {

            $scope.chartViewModel = null;
            $scope.selectedState = null;
            $scope.selectedTransition = null;

            $scope.stateAdd = function () {

                $scope.selectedState = {
                    StateId: 0,
                    ProcessId: 1,
                    StateTypeId: 1,
                    Name: '',
                    Description: 'blah',
                    X: 0,
                    Y: 0
                }

                stateModal();
            };

            $scope.stateUpdate = function () {

                if ($scope.oneNodeSelected()) {

                    var node = $scope.chartViewModel.getSelectedNodes()[0].data;
                    $scope.selectedState = {
                        StateId: node.id,
                        ProcessId: 1,
                        StateTypeId: node.statetypeid,
                        Name: node.name,
                        Description: node.description,
                        X: node.x,
                        Y: node.y
                    }

                    stateModal();
                }
            };

            var stateModal = function () {

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'stateModal.html',
                    controller: 'stateModalCtrl',
                    size: 'md',
                    resolve: {
                        selectedState: function () {
                            return $scope.selectedState;
                        }
                    }
                });

                modalInstance.result.then(function (selectedState) {

                    $scope.selectedState = selectedState;

                    svcApp.saveState($scope.selectedState).then(function (data) {

                        var newNodeDataModel = {
                            id: data.StateId, 
                            name: data.Name,
                            x: data.X,
                            y: data.Y,
                            description: data.description, 
                            inputConnectors: [],
                            outputConnectors: []
                        };

                        if (selectedState.StateId <= 0) {
                            $scope.chartViewModel.addNode(newNodeDataModel);
                        }
                        else {
                            $scope.chartViewModel.changeNode(newNodeDataModel);
                        }
                        
                    }, function () { alert('error saving state'); });

                }, function () {

                });

            }


            //
            // Code for the delete key.
            //
            var deleteKeyCode = 46;

            //
            // Code for control key.
            //
            var ctrlKeyCode = 65;

            //
            // Set to true when the ctrl key is down.
            //
            var ctrlDown = false;

            //
            // Code for A key.
            //
            var aKeyCode = 17;

            //
            // Code for esc key.
            //
            var escKeyCode = 27;

            //
            // Selects the next node id.
            //
            var nextNodeID = 10;

            // Create the view-model for the chart and attach to the scope.
            svcApp.getFlowchart().then(function (data) {
                $scope.chartViewModel = new flowchart.ChartViewModel(data);
            }, function () { });

            //
            // Event handler for key-down on the flowchart.
            //
            $scope.keyDown = function (evt) {

                if (evt.keyCode === ctrlKeyCode) {
                    ctrlDown = true;
                    evt.stopPropagation();
                    evt.preventDefault();
                }
            };

            //
            // Event handler for key-up on the flowchart.
            //
            $scope.keyUp = function (evt) {

                if (evt.keyCode === deleteKeyCode) {
                    //
                    // Delete key.
                    //
                    $scope.chartViewModel.deleteSelected();
                }

                if (evt.keyCode == aKeyCode && ctrlDown) {
                    //
                    // Ctrl + A
                    //
                    $scope.chartViewModel.selectAll();
                }

                if (evt.keyCode == escKeyCode) {
                    // Escape.
                    $scope.chartViewModel.deselectAll();
                }

                if (evt.keyCode === ctrlKeyCode) {
                    ctrlDown = false;

                    evt.stopPropagation();
                    evt.preventDefault();
                }
            };


            $scope.mouseUp = function (evt) {
                if ($scope.oneConnectionSelected()) {
                    var selectedConnection = $scope.chartViewModel.getSelectedConnections()[0];
                    svcApp.getTransition(selectedConnection.data.source.nodeID, selectedConnection.data.dest.nodeID).then(function (data) {
                        $scope.selectedTransition = data;
                    }, function () { });
                }
                else {
                    $scope.selectedTransition = null;
                }
            };

            //
            // Add an input connector to selected nodes.
            //
            $scope.addNewInputConnector = function () {
                var connectorName = prompt("Enter a connector name:", "New connector");
                if (!connectorName) {
                    return;
                }

                var selectedNodes = $scope.chartViewModel.getSelectedNodes();
                for (var i = 0; i < selectedNodes.length; ++i) {
                    var node = selectedNodes[i];
                    node.addInputConnector({
                        name: connectorName,
                    });
                }
            };

            //
            // Add an output connector to selected nodes.
            //
            $scope.addNewOutputConnector = function () {
                var connectorName = prompt("Enter a connector name:", "New connector");
                if (!connectorName) {
                    return;
                }

                var selectedNodes = $scope.chartViewModel.getSelectedNodes();
                for (var i = 0; i < selectedNodes.length; ++i) {
                    var node = selectedNodes[i];
                    node.addOutputConnector({
                        name: connectorName,
                    });
                }
            };

            //
            // Delete selected nodes and connections.
            //
            $scope.deleteSelected = function () {

                $scope.chartViewModel.deleteSelected();
            };

            $scope.oneNodeSelected = function () {
                if ($scope.chartViewModel) {
                    return $scope.chartViewModel.getSelectedNodes().length == 1 && $scope.chartViewModel.getSelectedConnections().length == 0;
                }
                else {
                    return false;
                }
            }

            $scope.twoNodesSelected = function () {
                if ($scope.chartViewModel) {
                    return $scope.chartViewModel.getSelectedNodes().length == 2 && $scope.chartViewModel.getSelectedConnections().length == 0;
                }
                else {
                    return false;
                }
            }

            $scope.oneConnectionSelected = function () {
                if ($scope.chartViewModel) {
                    return $scope.chartViewModel.getSelectedNodes().length == 0 && $scope.chartViewModel.getSelectedConnections().length == 1;
                }
                else {
                    return false;
                }
            }

            $scope.onNodeDragEndEvent = function (evt, node)
            {
                var coords = [];
                for (var selectedNode in $scope.chartViewModel.getSelectedNodes())
                {
                    currentNode = $scope.chartViewModel.getSelectedNodes()[selectedNode];
                    coords.push({ StateId: currentNode.data.id, X: currentNode.data.x, Y: currentNode.data.y });
                }
                svcApp.saveStateCoordinates(coords);
            }
        }]);

        angular.module('app').controller('stateModalCtrl', function ($scope, $uibModalInstance, selectedState) {

            $scope.selectedState = selectedState;

            $scope.ok = function () {
                $uibModalInstance.close($scope.selectedState);
            };

            $scope.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };

        });

        angular.module('app').factory('svcApp', ['$http', function ($http) {

            var _getFlowchart = function () {
                return $http.get($("#process_jsonflowchart").attr("href") + "?id=1")
                        .then(function (response) {
                            return response.data;
                        })
            };

            var _getTransition = function (curr, next) {
                var req = {
                    method: 'POST',
                    url: $("#transition_jsonbycurrentandnextstate").attr("href"),
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    data: $.param({
                        CurrentStateId: curr, NextStateId: next
                    })
                }

                return $http(req).then(function (response) {
                    return response.data;
                });
            };

            var _saveState = function (state) {

                var req = {
                    method: 'POST',
                    url: $("#state_jsonsave").attr("href"),
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    data: $.param({ State: state })
                }

                return $http(req).then(function (response) {
                    return response.data;
                });

            }

            var _saveStateCoordinates = function (coords) {

                var req = {
                    method: 'POST',
                    url: $("#state_jsonsavecoordinates").attr("href"),
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    data: $.param({ Coordinates: coords })
                }

                return $http(req).then(function (response) {
                    return response.data;
                });

            }

            return {
                getFlowchart: _getFlowchart,
                getTransition: _getTransition,
                saveState: _saveState,
                saveStateCoordinates: _saveStateCoordinates
            }

        }]);
    </script>
</body>

</html>