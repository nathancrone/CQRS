@{
    Layout = null;
}

@model CQRS.Service.QueryResults.ProcessByIdQueryResult

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/dashboard.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/flowchart.css" rel="stylesheet" type="text/css" />
    <title></title>
</head>
<body>

    <div ng-app="app"
         ng-controller="AppCtrl"
         mouse-capture
         ng-keydown="keyDown($event)"
         ng-keyup="keyUp($event)"
         ng-mouseup="mouseUp($event)">

        @Html.Hidden("ProcessId", Request.Params["id"], new { @id = "ProcessId" })
        @Html.Hidden("Url", Request.Url.GetLeftPart(UriPartial.Path), new { @id = "Url" })

        <nav class="navbar navbar-inverse navbar-fixed-top">
            <div class="container-fluid">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a ng-hide="processSelected()" class="navbar-brand" href="#">Workflow Admin</a>
                    <a ng-show="processSelected()" class="navbar-brand" href="#">{{ selectedProcess.Name }}</a>
                </div>
                <div id="navbar" class="navbar-collapse collapse">
                    <ul class="nav navbar-nav navbar-right">
                        <li ng-click="processSelect($event)"><a href="#">Select a Workflow</a></li>
                        <li ng-click="processAdd($event)"><a href="#">Create a New Workflow</a></li>
                        <li ng-click="processUpdate($event)" ng-show="processSelected()"><a href="#">Update Current Workflow</a></li>
                    </ul>
                </div>
            </div>
        </nav>

        <div class="container-fluid">
            <div class="row">

                <div ng-hide="processSelected()" class="col-sm-12">
                    <h3>No workflow currently selected.</h3>
                </div>

                <div ng-show="processSelected()">

                    <div class="col-sm-3 col-md-2 sidebar">

                        <h3>States...</h3>
                        <ul class="nav nav-sidebar">
                            <li><a href="#" ng-click="stateAdd($event)">Add a new state</a></li>
                            <li ng-show="oneNodeSelected()"><a href="#" ng-click="stateUpdate($event)">Edit state</a></li>
                            <li ng-show="oneNodeSelected()"><a href="#" ng-click="deleteSelected($event)">Delete state</a></li>
                        </ul>

                        @*only displayed when exactly two states are selected*@
                        <div ng-show="twoNodesSelected() || oneConnectionSelected()">
                            <h3>Transitions...</h3>
                            <ul class="nav nav-sidebar">
                                <li ng-show="twoNodesSelected()"><a href="#" ng-click="transitionAdd($event)">Add transition</a></li>
                                <li ng-show="oneConnectionSelected()"><a href="#" ng-click="transitionUpdate($event)">Edit transition</a></li>
                            </ul>
                        </div>

                        @*only displayed when exactly one transition is selected*@
                        <div ng-show="oneConnectionSelected()">
                            <h3>Actions...</h3>
                            <ul class="nav nav-sidebar">
                                <li ng-repeat="a in selectedTransition.Transition.Actions" ng-click="actionUpdate($event, a)"><a href="#">{{ a.Name }}</a></li>
                                <li><a href="#" ng-click="actionAdd($event)">Add action...</a></li>
                            </ul>
                        </div>

                    </div>
                    <div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main" style="height: 1000px;">
                        <flow-chart style="width: 100%; height: 100%;" chart="chartViewModel" on-node-drag-end="onNodeDragEndEvent(evt, node)"></flow-chart>
                        <textarea style="width: 100%; height: 100%;" chart-json-edit="" view-model="chartViewModel" class="ng-isolate-scope"></textarea>
                    </div>

                </div>

            </div>
        </div>

        <script type="text/ng-template" id="processesModal.html">
            <div class="modal-header">
                <h3 class="modal-title">Select a Workflow</h3>
            </div>
            <div class="modal-body">
                <form role="form">
                    <div class="form-group">
                        <label for="StateType">Workflow:</label>
                        <select class="form-control" ng-model="selectedProcess.ProcessId" ng-options="p.ProcessId as p.Name for p in processes"></select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" type="button" ng-click="ok()">OK</button>
                <button class="btn btn-warning" type="button" ng-click="cancel()">Cancel</button>
            </div>
        </script>

        <script type="text/ng-template" id="processModal.html">
            <div class="modal-header">
                <h3 class="modal-title" ng-show="selectedProcess.ProcessId <= 0">Add Workflow</h3>
                <h3 class="modal-title" ng-show="selectedProcess.ProcessId > 0">Update Workflow</h3>
            </div>
            <div class="modal-body">
                <form role="form">
                    <div class="form-group">
                        <label for="Name">Workflow Name:</label>
                        <input type="text" class="form-control" id="Name" ng-model="selectedProcess.Name">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" type="button" ng-click="ok()">OK</button>
                <button class="btn btn-warning" type="button" ng-click="cancel()">Cancel</button>
            </div>
        </script>

        <script type="text/ng-template" id="stateModal.html">
            <div class="modal-header">
                <h3 class="modal-title" ng-show="selectedState.StateId <= 0">Add State</h3>
                <h3 class="modal-title" ng-show="selectedState.StateId > 0">Update State</h3>
            </div>
            <div class="modal-body">
                <form role="form">
                    <div class="form-group">
                        <label for="StateType">State Type:</label>
                        <select class="form-control" ng-model="selectedState.StateTypeId" ng-options="type.StateTypeId as type.Name for type in stateTypes"></select>
                    </div>
                    <div class="form-group">
                        <label for="Name">State Name:</label>
                        <input type="text" class="form-control" id="Name" ng-model="selectedState.Name">
                    </div>
                    <div class="form-group">
                        <label for="Description">Description:</label>
                        <input type="text" class="form-control" id="Description" ng-model="selectedState.Description">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" type="button" ng-click="ok()">OK</button>
                <button class="btn btn-warning" type="button" ng-click="cancel()">Cancel</button>
            </div>
        </script>

        <script type="text/ng-template" id="transitionModal.html">
            <div class="modal-header">
                <h3 class="modal-title" ng-show="selectedTransition.TransitionId <= 0">Add Transition</h3>
                <h3 class="modal-title" ng-show="selectedTransition.TransitionId > 0">Update Transition</h3>
            </div>
            <div class="modal-body">
                <form role="form">
                    <div class="form-group">
                        <label for="From">From:</label>
                        <select class="form-control" ng-model="selectedTransition.CurrentStateId" ng-options="node.data.id as node.data.name for node in selectedNodes"></select>
                    </div>
                    <div class="form-group">
                        <label for="To">To:</label>
                        <select class="form-control" ng-model="selectedTransition.NextStateId" ng-options="node.data.id as node.data.name for node in selectedNodes"></select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" type="button" ng-click="ok()">OK</button>
                <button class="btn btn-warning" type="button" ng-click="cancel()">Cancel</button>
            </div>
        </script>

        <script type="text/ng-template" id="actionModal.html">
            <div class="modal-header">
                <h3 class="modal-title" ng-show="selectedAction.ActionId <= 0">Add Action</h3>
                <h3 class="modal-title" ng-show="selectedAction.ActionId > 0">Update Action</h3>
            </div>
            <div class="modal-body">
                <form role="form">
                    <div class="form-group">
                        <label for="StateType">Action Type:</label>
                        <select class="form-control" ng-model="selectedAction.ActionTypeId" ng-options="a.ActionTypeId as a.Name for a in actionTypes"></select>
                    </div>
                    <div class="form-group">
                        <label for="Name">Action Name:</label>
                        <input type="text" class="form-control" id="Name" ng-model="selectedAction.Name">
                    </div>
                    <div class="form-group">
                        <label for="Description">Description:</label>
                        <input type="text" class="form-control" id="Description" ng-model="selectedAction.Description">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" type="button" ng-click="ok()">OK</button>
                <button class="btn btn-warning" type="button" ng-click="cancel()">Cancel</button>
            </div>
        </script>

    </div>

    @*<button ng-click="addNewNode()"
                title="Add a new node to the chart">
            Add Node
        </button>
        <button ng-click="addNewInputConnector()"
                ng-disabled="chartViewModel.getSelectedNodes().length == 0"
                title="Add a new input connector to the selected node">
            Add Input Connector
        </button>
        <button ng-click="addNewOutputConnector()"
                ng-disabled="chartViewModel.getSelectedNodes().length == 0"
                title="Add a new output connector to the selected node">
            Add Output Connector
        </button>
        <button ng-click="deleteSelected()"
                ng-disabled="chartViewModel.getSelectedNodes().length == 0 && chartViewModel.getSelectedConnections().length == 0"
                title="Delete selected nodes and connections">
            Delete Selected
        </button>*@

    @Html.ActionLink(" ", "JsonFlowchart", "Process", null, new { id = "process_jsonflowchart", @class = "hide" })
    @Html.ActionLink(" ", "JsonAll", "StateType", null, new { id = "statetype_jsonall", @class = "hide" })
    @Html.ActionLink(" ", "JsonAll", "ActionType", null, new { id = "actiontype_jsonall", @class = "hide" })
    @Html.ActionLink(" ", "JsonByCurrentAndNextState", "Transition", null, new { id = "transition_jsonbycurrentandnextstate", @class = "hide" })
    @Html.ActionLink(" ", "JsonById", "Transition", null, new { id = "transition_jsonbyid", @class = "hide" })
    @Html.ActionLink(" ", "JsonSave", "Process", null, new { id = "process_jsonsave", @class = "hide" })
    @Html.ActionLink(" ", "JsonAll", "Process", null, new { id = "process_jsonall", @class = "hide" })
    @Html.ActionLink(" ", "JsonSave", "State", null, new { id = "state_jsonsave", @class = "hide" })
    @Html.ActionLink(" ", "JsonSaveCoordinates", "State", null, new { id = "state_jsonsavecoordinates", @class = "hide" })
    @Html.ActionLink(" ", "JsonSave", "Transition", null, new { id = "transition_jsonsave", @class = "hide" })
    @Html.ActionLink(" ", "JsonSave", "Action", null, new { id = "action_jsonsave", @class = "hide" })

    <script src="~/Scripts/jquery-1.11.3.min.js"></script>
    <script src="~/Scripts/angular.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>

    @* angular bootstrap *@
    <script src="~/Scripts/angular-ui/ui-bootstrap-tpls.min.js" type="text/javascript"></script>

    @* flowchart-specific resources *@
    <script src="~/Scripts/flowchart/svg_class.js" type="text/javascript"></script>
    <script src="~/Scripts/flowchart/mouse_capture_service.js" type="text/javascript"></script>
    <script src="~/Scripts/flowchart/dragging_service.js" type="text/javascript"></script>
    <script src="~/Scripts/flowchart/flowchart_viewmodel.js" type="text/javascript"></script>
    <script src="~/Scripts/flowchart/flowchart_directive.js" type="text/javascript"></script>

    <script>
        //
        // Define the 'app' module.
        //
        angular.module('app', ['flowChart', 'ui.bootstrap']);

        angular.module('app').controller('AppCtrl', ['$scope', '$window', '$uibModal', 'svcApp', function AppCtrl($scope, $window, $uibModal, svcApp) {

            $scope.chartViewModel = null;
            $scope.processes = null;
            $scope.stateTypes = null;
            $scope.actionTypes = null;

            $scope.selectedProcess = null;
            $scope.selectedState = null;
            $scope.selectedTransition = null;
            $scope.selectedAction = null;

            $scope.processSelect = function (evt) {

                evt.preventDefault();

                svcApp.getProcesses().then(function (data) {

                    
                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: 'processesModal.html',
                        controller: 'processesModalCtrl',
                        size: 'md',
                        resolve: {
                            processes: function () {
                                return data.Processes;
                            },
                            selectedProcess: function () {
                                return $scope.selectedProcess;
                            }
                        }
                    });

                    modalInstance.result.then(function (selectedProcess) {
                        $scope.selectedProcess = selectedProcess;
                        $window.location.href = $('input:hidden#Url').val() + '?id=' + $scope.selectedProcess.ProcessId;
                    }, function () {

                    });

                }, function () { });

            }

            $scope.processAdd = function (evt) {

                evt.preventDefault();

                $scope.selectedProcess = {
                    ProcessId: 0,
                    Name: ''
                }

                processModal();
            };

            $scope.processUpdate = function (evt) {
                evt.preventDefault();
                processModal();
            };

            var processModal = function () {

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'processModal.html',
                    controller: 'processModalCtrl',
                    size: 'md',
                    resolve: {
                        selectedProcess: function () {
                            return $scope.selectedProcess;
                        }
                    }
                });

                modalInstance.result.then(function (selectedProcess) {

                    $scope.selectedProcess = selectedProcess;

                    svcApp.saveProcess($scope.selectedProcess).then(function (data) {

                        $scope.selectedProcess = data;

                        if (selectedProcess.ProcessId <= 0) {
                            $window.location.href = $('input:hidden#Url').val() + '?id=' + $scope.selectedProcess.ProcessId;
                        }

                    }, function () { alert('error saving process'); });

                }, function () {

                });
            }

            $scope.stateAdd = function (evt) {
                evt.preventDefault();
                $scope.selectedState = {
                    StateId: 0,
                    ProcessId: $scope.selectedProcess.ProcessId,
                    StateTypeId: $scope.stateTypes[0].StateTypeId,
                    Name: '',
                    Description: 'blah',
                    X: 0,
                    Y: 0
                }

                stateModal();
            };

            $scope.stateUpdate = function (evt) {
                evt.preventDefault();
                if ($scope.oneNodeSelected()) {

                    var node = $scope.chartViewModel.getSelectedNodes()[0].data;
                    $scope.selectedState = {
                        StateId: node.id,
                        ProcessId: $scope.selectedProcess.ProcessId,
                        StateTypeId: node.statetypeid,
                        Name: node.name,
                        Description: node.description,
                        X: node.x,
                        Y: node.y
                    }

                    stateModal();
                }
            };

            var stateModal = function () {

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'stateModal.html',
                    controller: 'stateModalCtrl',
                    size: 'md',
                    resolve: {
                        stateTypes: function () {
                            return $scope.stateTypes;
                        },
                        selectedState: function () {
                            return $scope.selectedState;
                        }
                    }
                });

                modalInstance.result.then(function (selectedState) {

                    $scope.selectedState = selectedState;

                    svcApp.saveState($scope.selectedState).then(function (data) {

                        var newNodeDataModel = {
                            id: data.StateId,
                            name: data.Name,
                            statetypeid: data.StateTypeId,
                            x: data.X,
                            y: data.Y,
                            description: data.Description,
                            inputConnectors: [],
                            outputConnectors: []
                        };

                        if (selectedState.StateId <= 0) {
                            $scope.chartViewModel.addNode(newNodeDataModel);
                        }
                        else {
                            $scope.chartViewModel.changeNode(newNodeDataModel);
                        }

                    }, function () { alert('error saving state'); });

                }, function () {

                });

            }

            $scope.transitionAdd = function (evt) {
                evt.preventDefault();
                $scope.selectedTransition = {
                    TransitionId: 0,
                    ProcessId: $scope.selectedProcess.ProcessId,
                    CurrentStateId: $scope.chartViewModel.getSelectedNodes()[0].data.id,
                    NextStateId: $scope.chartViewModel.getSelectedNodes()[1].data.id
                }

                transitionModal();
            };

            $scope.transitionUpdate = function (evt) {
                evt.preventDefault();
                if ($scope.oneConnectionSelected()) {

                    var connection = $scope.chartViewModel.getSelectedConnections()[0].data;
                    $scope.selectedTransition = {
                        TransitionId: connection.id,
                        ProcessId: $scope.selectedProcess.ProcessId,
                        CurrentStateId: connection.source.nodeID,
                        NextStateId: connection.dest.nodeID
                    }

                    transitionModal();
                }
            };

            var transitionModal = function () {

                var selectedNodes = null;
                if ($scope.selectedTransition.TransitionId <= 0) {
                    selectedNodes = $scope.chartViewModel.getSelectedNodes();
                }
                else {
                    selectedNodes = [$scope.chartViewModel.findNode($scope.selectedTransition.CurrentStateId), $scope.chartViewModel.findNode($scope.selectedTransition.NextStateId)];
                }

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'transitionModal.html',
                    controller: 'transitionModalCtrl',
                    size: 'md',
                    resolve: {
                        selectedTransition: function () {
                            return $scope.selectedTransition;
                        },
                        selectedNodes: function () {
                            return selectedNodes;
                        }
                    }
                });

                modalInstance.result.then(function (selectedTransition) {

                    $scope.selectedTransition = selectedTransition;

                    svcApp.saveTransition($scope.selectedTransition).then(function (data) {

                        //if modifying an existing transition
                        if (selectedTransition.TransitionId > 0) {
                            $scope.chartViewModel.deselectAll(); //deselect everything
                            $scope.chartViewModel.findConnection(data.TransitionId).select(); //select only the connection
                            $scope.chartViewModel.deleteSelected(); //delete the old connection
                        }

                        $scope.chartViewModel.findNode(data.CurrentStateId).addOutputConnector({
                            name: data.TransitionId
                        });

                        $scope.chartViewModel.findNode(data.CurrentStateId).removeInputConnector(data.TransitionId);

                        $scope.chartViewModel.findNode(data.NextStateId).addInputConnector({
                            name: data.TransitionId
                        });

                        $scope.chartViewModel.findNode(data.NextStateId).removeOutputConnector(data.TransitionId);

                        $scope.chartViewModel.createNewConnection(
                            $scope.chartViewModel.findOutputConnector(data.CurrentStateId, $scope.chartViewModel.findNode(data.CurrentStateId).outputConnectors.length - 1),
                            $scope.chartViewModel.findInputConnector(data.NextStateId, $scope.chartViewModel.findNode(data.NextStateId).inputConnectors.length - 1)
                            );

                        $scope.chartViewModel.connections[$scope.chartViewModel.connections.length - 1].data.id = data.TransitionId;

                    }, function () { alert('error saving connection'); });

                }, function () {

                });
            }

            $scope.actionAdd = function (evt) {
                evt.preventDefault();
                if ($scope.oneConnectionSelected()) {
                    $scope.selectedAction = {
                        ActionId: 0,
                        ProcessId: $scope.selectedProcess.ProcessId,
                        ActionTypeId: $scope.actionTypes[0].ActionTypeId,
                        Name: '',
                        Description: 'blah'
                    }

                    var connection = $scope.chartViewModel.getSelectedConnections()[0].data;

                    actionModal(connection.id);
                }
            };

            $scope.actionUpdate = function (evt, action) {
                evt.preventDefault();
                if ($scope.oneConnectionSelected()) {
                    $scope.selectedAction = action;

                    var connection = $scope.chartViewModel.getSelectedConnections()[0].data;

                    actionModal(connection.id);
                }
            };

            var actionModal = function (transitionid) {

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'actionModal.html',
                    controller: 'actionModalCtrl',
                    size: 'md',
                    resolve: {
                        actionTypes: function () {
                            return $scope.actionTypes;
                        },
                        selectedAction: function () {
                            return $scope.selectedAction;
                        }
                    }
                });

                modalInstance.result.then(function (selectedAction) {

                    $scope.selectedAction = selectedAction;

                    svcApp.saveAction($scope.selectedAction, transitionid).then(function (data) {

                        if ($scope.oneConnectionSelected()) {
                            var selectedConnection = $scope.chartViewModel.getSelectedConnections()[0];
                            svcApp.getTransition(selectedConnection.data.id).then(function (data) {
                                $scope.selectedTransition = data;
                            }, function () { });
                        }

                    }, function () { alert('error saving action'); });

                }, function () {

                });
            }


            //
            // Code for the delete key.
            //
            var deleteKeyCode = 46;

            //
            // Code for control key.
            //
            var ctrlKeyCode = 65;

            //
            // Set to true when the ctrl key is down.
            //
            var ctrlDown = false;

            //
            // Code for A key.
            //
            var aKeyCode = 17;

            //
            // Code for esc key.
            //
            var escKeyCode = 27;

            //
            // Selects the next node id.
            //
            var nextNodeID = 10;

            // Create the view-model for the chart and attach to the scope.
            if ($('input:hidden#ProcessId').val() != '') {

                svcApp.getFlowchart($('input:hidden#ProcessId').val()).then(function (data) {

                    $scope.selectedProcess = data.Process;
                    $scope.chartViewModel = new flowchart.ChartViewModel(data.ViewModel);

                    svcApp.getStateTypes().then(function (data) {
                        $scope.stateTypes = data.StateTypes;
                    }, function () { });

                    svcApp.getActionTypes().then(function (data) {
                        $scope.actionTypes = data.ActionTypes;
                    }, function () { });

                }, function () { });
            }

            //
            // Event handler for key-down on the flowchart.
            //
            $scope.keyDown = function (evt) {

                if (evt.keyCode === ctrlKeyCode) {
                    ctrlDown = true;
                    evt.stopPropagation();
                    evt.preventDefault();
                }
            };

            //
            // Event handler for key-up on the flowchart.
            //
            $scope.keyUp = function (evt) {

                if (evt.keyCode === deleteKeyCode) {
                    //
                    // Delete key.
                    //
                    $scope.chartViewModel.deleteSelected();
                }

                if (evt.keyCode == aKeyCode && ctrlDown) {
                    //
                    // Ctrl + A
                    //
                    $scope.chartViewModel.selectAll();
                }

                if (evt.keyCode == escKeyCode) {
                    // Escape.
                    $scope.chartViewModel.deselectAll();
                }

                if (evt.keyCode === ctrlKeyCode) {
                    ctrlDown = false;

                    evt.stopPropagation();
                    evt.preventDefault();
                }
            };

            $scope.mouseUp = function (evt) {
                if ($scope.oneConnectionSelected()) {
                    var selectedConnection = $scope.chartViewModel.getSelectedConnections()[0];
                    svcApp.getTransition(selectedConnection.data.id).then(function (data) {
                        $scope.selectedTransition = data;
                    }, function () { });
                }
                else {
                    $scope.selectedTransition = null;
                }
            };

            //
            // Delete selected nodes and connections.
            //
            $scope.deleteSelected = function (evt) {
                evt.preventDefault();
                $scope.chartViewModel.deleteSelected();
            };

            $scope.processSelected = function () {
                return $scope.selectedProcess != null;
            }

            $scope.oneNodeSelected = function () {
                if ($scope.chartViewModel) {
                    return $scope.chartViewModel.getSelectedNodes().length == 1 && $scope.chartViewModel.getSelectedConnections().length == 0;
                }
                else {
                    return false;
                }
            }

            $scope.twoNodesSelected = function () {
                if ($scope.chartViewModel) {
                    return $scope.chartViewModel.getSelectedNodes().length == 2 && $scope.chartViewModel.getSelectedConnections().length == 0;
                }
                else {
                    return false;
                }
            }

            $scope.oneConnectionSelected = function () {
                if ($scope.chartViewModel) {
                    return $scope.chartViewModel.getSelectedNodes().length == 0 && $scope.chartViewModel.getSelectedConnections().length == 1;
                }
                else {
                    return false;
                }
            }

            $scope.onNodeDragEndEvent = function (evt, node) {
                var coords = [];
                for (var selectedNode in $scope.chartViewModel.getSelectedNodes()) {
                    currentNode = $scope.chartViewModel.getSelectedNodes()[selectedNode];
                    coords.push({ StateId: currentNode.data.id, X: currentNode.data.x, Y: currentNode.data.y });
                }
                svcApp.saveStateCoordinates(coords);
            }
        }]);

        angular.module('app').controller('processesModalCtrl', function ($scope, $uibModalInstance, processes, selectedProcess) {

            $scope.processes = processes;
            $scope.selectedProcess = selectedProcess;

            $scope.ok = function () {
                $uibModalInstance.close($scope.selectedProcess);
            };

            $scope.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };

        });

        angular.module('app').controller('processModalCtrl', function ($scope, $uibModalInstance, selectedProcess) {

            $scope.selectedProcess = selectedProcess;

            $scope.ok = function () {
                $uibModalInstance.close($scope.selectedProcess);
            };

            $scope.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };

        });

        angular.module('app').controller('stateModalCtrl', function ($scope, $uibModalInstance, stateTypes, selectedState) {

            $scope.stateTypes = stateTypes;
            $scope.selectedState = selectedState;

            $scope.ok = function () {
                $uibModalInstance.close($scope.selectedState);
            };

            $scope.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };

        });

        angular.module('app').controller('transitionModalCtrl', function ($scope, $uibModalInstance, selectedTransition, selectedNodes) {

            $scope.selectedTransition = selectedTransition;
            $scope.selectedNodes = selectedNodes;

            $scope.ok = function () {
                $uibModalInstance.close($scope.selectedTransition);
            };

            $scope.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };

        });

        angular.module('app').controller('actionModalCtrl', function ($scope, $uibModalInstance, actionTypes, selectedAction) {

            $scope.actionTypes = actionTypes;
            $scope.selectedAction = selectedAction;

            $scope.ok = function () {
                $uibModalInstance.close($scope.selectedAction);
            };

            $scope.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };

        });

        angular.module('app').factory('svcApp', ['$http', function ($http) {

            var _getFlowchart = function (id) {
                return $http.get($("#process_jsonflowchart").attr("href") + "?id=" + id)
                        .then(function (response) {
                            return response.data;
                        })
            };

            var _getProcesses = function () {
                return $http.get($("#process_jsonall").attr("href"))
                        .then(function (response) {
                            return response.data;
                        })
            };

            var _getStateTypes = function () {
                return $http.get($("#statetype_jsonall").attr("href"))
                        .then(function (response) {
                            return response.data;
                        })
            };

            var _getActionTypes = function () {
                return $http.get($("#actiontype_jsonall").attr("href"))
                        .then(function (response) {
                            return response.data;
                        })
            };

            var _getTransition = function (id) {
                var req = {
                    method: 'POST',
                    url: $("#transition_jsonbyid").attr("href"),
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    data: $.param({
                        Id: id
                    })
                }

                return $http(req).then(function (response) {
                    return response.data;
                });
            };

            var _saveProcess = function (process) {

                var req = {
                    method: 'POST',
                    url: $("#process_jsonsave").attr("href"),
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    data: $.param({ Process: process })
                }

                return $http(req).then(function (response) {
                    return response.data;
                });

            }

            var _saveState = function (state) {

                var req = {
                    method: 'POST',
                    url: $("#state_jsonsave").attr("href"),
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    data: $.param({ State: state })
                }

                return $http(req).then(function (response) {
                    return response.data;
                });

            }

            var _saveTransition = function (transition) {

                var req = {
                    method: 'POST',
                    url: $("#transition_jsonsave").attr("href"),
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    data: $.param({ Transition: transition })
                }

                return $http(req).then(function (response) {
                    return response.data;
                });

            }

            var _saveAction = function (action, transitionid) {

                action['Transitions'] = [{ ProcessId: $scope.selectedProcess.ProcessId, TransitionId: transitionid }];

                var req = {
                    method: 'POST',
                    url: $("#action_jsonsave").attr("href"),
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    data: $.param({ data: action })
                }

                return $http(req).then(function (response) {
                    return response.data;
                });

            }

            var _saveStateCoordinates = function (coords) {

                var req = {
                    method: 'POST',
                    url: $("#state_jsonsavecoordinates").attr("href"),
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    data: $.param({ Coordinates: coords })
                }

                return $http(req).then(function (response) {
                    return response.data;
                });

            }

            return {
                getFlowchart: _getFlowchart,
                getProcesses: _getProcesses,
                getStateTypes: _getStateTypes,
                getActionTypes: _getActionTypes,
                getTransition: _getTransition,
                saveProcess: _saveProcess,
                saveState: _saveState,
                saveStateCoordinates: _saveStateCoordinates,
                saveTransition: _saveTransition,
                saveAction: _saveAction
            }

        }]);
    </script>
</body>



</html>